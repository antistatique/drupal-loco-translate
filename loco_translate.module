<?php

/**
 * @file
 * Primary module hooks for Loco Translate module.
 */

require_once 'inc/cron_pull.inc';
require_once 'inc/cron_push.inc';

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function loco_translate_theme($existing, $type, $theme, $path) {
  return [
    'loco_translate_overview_page' => [
      'variables' => ['variables' => []],
      'template'  => 'loco-translate--overview--page',
    ],
  ];
}

/**
 * Implements hook_cron().
 *
 * Automation of Loco Translate module.
 */
function loco_translate_cron() {
  $now = time();
  $config = \Drupal::config('loco_translate.settings');
  $utility = \Drupal::service('loco_translate.utility');

  // Get configured langcode to pull from loco.
  $langcodes = $config->get('automation.pull.langcodes');
  if ($langcodes) {
    foreach ($langcodes as $langcode => $status) {
      // Skip unchecked langcode.
      if (!$status) {
        continue;
      }

      // Check last run of this langcode.
      $last_run = $utility->getLastPull($langcode);

      if ($now - $last_run >= $config->get('automation.pull.interval')) {
        continue;
      }

      try {
        loco_translate_cron_pull($langcode, $config->get('automation.pull'));
        $utility->setLastPull($langcode, $now);
      }
      catch (\Throwable $th) {
        watchdog_exception('loco_translate', $th, 'Error while trying to pull from Loco.');
      }
    }
  }

  // Get configured langcode to pull from loco.
  $langcodes = $config->get('automation.push.langcodes');
  if ($langcodes && $config->get('automation.push.template')) {
    foreach ($langcodes as $langcode => $status) {
      // Skip unchecked langcode.
      if (!$status) {
        continue;
      }

      $last_run = $utility->getLastPush($langcode);
      if ($now - $last_run >= $config->get('automation.push.interval')) {
        continue;
      }

      try {
        loco_translate_cron_push($langcode, $config->get('automation.push'));
        $utility->setLastPush($langcode, $now);
      }
      catch (\Throwable $th) {
        watchdog_exception('loco_translate', $th, 'Error while trying to push to Loco.');
      }
    }
  }
}

/**
 * Implements hook_help().
 *
 * Hook to generate help page.
 */
function loco_translate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.loco_translate':
      $readme = __DIR__ . '/README.md';
      $text = file_get_contents($readme);
      $output = '';

      // If the Markdown module is installed, use it to render the README.
      if ($text && \Drupal::moduleHandler()->moduleExists('markdown') === TRUE) {
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        $output = $filter->process($text, 'en');
      }
      // Else the Markdown module is not installed output the README as text.
      elseif ($text) {
        $output = '<pre>' . $text . '</pre>';
      }

      // Add a link to the Drupal.org project.
      $output .= '<p>';
      $output .= t('Visit the <a href=":project_link">Loco Translate project page</a> on Drupal.org for more information.', [
        ':project_link' => 'https://www.drupal.org/project/loco_translate',
      ]);
      $output .= '</p>';

      return $output;
  }
}
